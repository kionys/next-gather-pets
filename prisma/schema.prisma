// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int @id @default(autoincrement())
  email          String @unique
  authType       String?   // 계정 타입(self, kakao, naver, google)
  name           String?
  password       String?  // 소셜 로그인 시 null일 수 있음
  image          String?  // 프로필 이미지
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  emailVerified  DateTime?
  posts Post[]

  accounts      Account[]
  sessions      Session[] 
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  image       String?
  email       String
  hashtags    String    
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
}


// next auth
// https://authjs.dev/getting-started/adapters/prisma
model Account {
  id                 String  @id @default(cuid())
  userId             Int  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  refresh_token_expires_in Int?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique @map("session_token")
  userId            Int   @map("user_id")
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
}
  
model VerificationToken {
  identifier        String
  token             String
  expires           DateTime
 
  @@unique([identifier, token])
}
